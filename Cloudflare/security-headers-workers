let securityHeaders = {
"Content-Security-Policy" : "default-src 'none'; script-src;  style-src 'self'; font-src 'self'; connect-src 'self'; media-src 'none'; prefetch-src 'self'; child-src 'none'; frame-src 'none' ; worker-src 'self' blob:  https:; frame-ancestors 'none'; form-action 'self' https://shop1.techaura.co.uk; base-uri 'self'; manifest-src 'self'; object-src 'none';",	

	"X-Xss-Protection" : "1; mode=block",
	"X-Frame-Options" : "DENY",
	"X-Content-Type-Options" : "nosniff",
	"Referrer-Policy" : "strict-origin-when-cross-origin",
	"Permissions-Policy" : "accelerometer=(),camera=(),geolocation=(),gyroscope=(),magnetometer=(),microphone=(),payment=(),usb=(),autoplay=(),encrypted-media=(),fullscreen=(),geolocation=(),microphone=(),midi=()",
}

let sanitiseHeaders = {
	"Server" : "Powered by TechAura!!!",
}

let removeHeaders = [
	"Public-Key-Pins",
	"X-Powered-By",
	"X-AspNet-Version",
]

addEventListener('fetch', event => {
	event.respondWith(addHeaders(event.request))
})

async function addHeaders(req) {
	let response = await fetch(req)
	let newHdrs = new Headers(response.headers)

	if (newHdrs.has("Content-Type") && !newHdrs.get("Content-Type").includes("text/html")) {
        return new Response(response.body , {
            status: response.status,
            statusText: response.statusText,
            headers: newHdrs
        })
	}

	Object.keys(securityHeaders).map(function(name, index) {
		newHdrs.set(name, securityHeaders[name]);
	})

	Object.keys(sanitiseHeaders).map(function(name, index) {
		newHdrs.set(name, sanitiseHeaders[name]);
	})

	removeHeaders.forEach(function(name){
		newHdrs.delete(name)
	})

	return new Response(response.body , {
		status: response.status,
		statusText: response.statusText,
		headers: newHdrs
	})
}
